generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Hospital {
  id                               Int                                @id @default(autoincrement())
  hospitalName                     String
  hospitalCode                     String
  phoneNumber                      String
  createdAt                        DateTime                           @default(now())
  updatedAt                        DateTime                           @updatedAt
  hospitalImg                      String
  Department                       Department[]
  PatientVisit                     PatientVisit[]
  Permission                       Permission[]
  Product                          Product[]
  Role                             Role[]
  User                             User[]
  Vendor                           Vendor[]
  Order                            Order[]
  TaxCode                          TaxCode[]
  OrderGroups                      OrderGroups[]
  Receipt                          Receipt[]
  Bill                             Bill[]
  BillingConsultationOrderLineItem BillingConsultationOrderLineItem[]
  BillingPatientOrderLineItem      BillingPatientOrderLineItem[]
  BankAccount                      BankAccount[]
}

model Department {
  id           Int            @id @default(autoincrement())
  name         String
  hospitalId   Int
  updatedBy    String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Hospital     Hospital       @relation(fields: [hospitalId], references: [id])
  PatientVisit PatientVisit[]
  User         User[]
  Order        Order[]
  Role         Role?          @relation(fields: [roleId], references: [id])
  roleId       Int?
  Product      Product?       @relation(fields: [productId], references: [id])
  productId    String?
}

model User {
  id           String         @id @default(uuid())
  name         String
  email        String
  phoneNumber  String
  hospitalId   Int
  department   Int
  isActive     Boolean        @default(true)
  updatedBy    String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  PatientVisit PatientVisit[]
  Department   Department     @relation(fields: [department], references: [id])
  Hospital     Hospital       @relation(fields: [hospitalId], references: [id])
  UserLogin    UserLogin?
  DoctorCut    DoctorCut[]

  @@unique([email, hospitalId])
}

model UserLogin {
  userId    String   @unique
  password  String
  updatedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

enum RoleType {
  DOCTOR
  NURSE
  RECEPTIONIST
  ADMIN
  ACCOUNTANT
  PHARMACIST
  LAB_TECHNICIAN
}

model Role {
  id           Int              @id @default(autoincrement())
  roleName     String
  description  String?
  hospitalId   Int
  roleType     RoleType
  isSuperAdmin Boolean?         @default(false)
  updatedBy    String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  Department   Department[]
  Hospital     Hospital         @relation(fields: [hospitalId], references: [id])
  permissions  RolePermission[]

  @@unique([roleName, hospitalId])
}

model Permission {
  id              Int              @id @default(autoincrement())
  permissionName  String           @unique
  description     String?
  hospitalId      Int
  updatedBy       String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  Hospital        Hospital         @relation(fields: [hospitalId], references: [id])
  rolePermissions RolePermission[]
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int
  updatedBy    String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])
}

model Vendor {
  id          String   @id @default(uuid())
  name        String
  phoneNumber String
  email       String
  address     String
  gstNumber   String
  branchName  String
  hospitalId  Int
  updatedBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Hospital    Hospital @relation(fields: [hospitalId], references: [id])
}

model Product {
  id           String       @id @default(uuid())
  name         String
  sku          String
  hsnCode      String
  genericName  String?
  brandName    String?
  manufacturer String?
  dosageForm   String?
  strength     String?
  purchaseRate Float
  saleRate     Float
  mrp          Float
  maxDiscount  Float
  hospitalId   Int
  taxCodeId    Int
  TaxCode      TaxCode      @relation(fields: [taxCodeId], references: [id])
  updatedBy    String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  Hospital     Hospital     @relation(fields: [hospitalId], references: [id])
  Department   Department[]
}

model Patient {
  uhid         String         @id @default(uuid())
  name         String
  gender       Gender
  mobile       String
  hospitalId   Int
  dob          DateTime?
  bornYear     Int?
  aadharNumber String?
  aadharName   String?
  bloodGroup   String?
  address      String?
  city         String?
  pincode      String?
  updatedBy    String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  isDeleted    Boolean        @default(false)
  fatherName   String
  PatientVisit PatientVisit[]
}

model PatientVisit {
  id                               String                             @id @default(uuid())
  uhid                             String
  hospitalId                       Int
  doctorId                         String
  checkInTime                      DateTime
  checkOutTime                     DateTime?
  isDeleted                        Boolean                            @default(false)
  updatedBy                        String?
  createdAt                        DateTime                           @default(now())
  updatedAt                        DateTime                           @updatedAt
  orderOpenedAt                    DateTime?
  token                            Int?
  Assessment                       Assessment?
  Doctor                           User                               @relation(fields: [doctorId], references: [id])
  Hospital                         Hospital                           @relation(fields: [hospitalId], references: [id])
  Patient                          Patient                            @relation(fields: [uhid], references: [uhid])
  Department                       Department?                        @relation(fields: [departmentId], references: [id])
  departmentId                     Int?
  PatientOrder                     PatientOrder?
  PatientVital                     PatientVital?
  PatientPrescription              PatientPrescription?
  BillingPatientOrderLineItem      BillingPatientOrderLineItem[]
  BillingConsultationOrderLineItem BillingConsultationOrderLineItem[]
  Bill                             Bill[]
  Receipt                          Receipt[]
}

model Assessment {
  visitId             String       @unique
  complaint           String?
  currentMedication   String?
  pastMedicalHistory  String?
  examination         String?
  investigation       String?
  procedureDone       String?
  diagnosis           Json?
  treatmentGiven      String?
  advice              String?
  followUpDate        DateTime?
  followupInstruction String?
  updatedBy           String?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  PatientVisit        PatientVisit @relation(fields: [visitId], references: [id])
}

enum OrderWorkflow {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Order {
  id                   String      @id @default(uuid())
  hospitalId           Int
  hospital             Hospital    @relation(fields: [hospitalId], references: [id])
  name                 String
  description          String?
  departmentId         Int?
  department           Department? @relation(fields: [departmentId], references: [id])
  baseAmount           Float
  taxCodeId            Int
  taxCode              TaxCode     @relation(fields: [taxCodeId], references: [id])
  maxDiscount          Float?
  consultationRequired Boolean
  tags                 String[]

  updatedBy                        String?
  createdAt                        DateTime                           @default(now())
  updatedAt                        DateTime                           @updatedAt
  DoctorCut                        DoctorCut[]
  OrderGroup                       OrderGroups[]                      @relation("OrderGroups-Order")
  patientOrderId                   Int?
  PatientOrder                     PatientOrder?                      @relation(fields: [patientOrderVisitId], references: [visitId])
  patientOrderVisitId              String?
  consultationOrderId              String?
  BillingConsultationOrderLineItem BillingConsultationOrderLineItem[]
  BillingPatientOrderLineItem      BillingPatientOrderLineItem[]
}

model OrderGroups {
  id          String   @id @default(uuid())
  name        String
  description String?
  hospitalId  Int
  hospital    Hospital @relation(fields: [hospitalId], references: [id])
  updatedBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Order       Order[]  @relation("OrderGroups-Order")
}

model DoctorCut {
  userId     String
  orderId    String
  user       User     @relation(fields: [userId], references: [id])
  order      Order    @relation(fields: [orderId], references: [id])
  flatFee    Float
  percentFee Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  updatedBy  String?

  @@unique([userId, orderId])
}

model TaxCode {
  id          Int       @id @default(autoincrement())
  hospitalId  Int
  hospital    Hospital  @relation(fields: [hospitalId], references: [id])
  taxCode     String
  taxRate     Float
  description String?
  updatedBy   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Order       Order[]
  Product     Product[]
}

model PatientOrder {
  visitId      String       @unique
  order        Order[]
  orderDate    DateTime
  updatedBy    String?
  remark       Json?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  PatientVisit PatientVisit @relation(fields: [visitId], references: [id])
}

model BillingPatientOrderLineItem {
  id          Int          @id @default(autoincrement())
  visitId     String
  Visit       PatientVisit @relation(fields: [visitId], references: [id])
  orderId     String
  order       Order        @relation(fields: [orderId], references: [id])
  hospitalId  Int
  hospital    Hospital     @relation(fields: [hospitalId], references: [id])
  isRemoved   Boolean
  quantity    Int
  rate        Float
  discount    Float
  tax         Float
  totalAmount Float
  updatedBy   String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Bill        Bill?        @relation(fields: [billId], references: [id])
  billId      String?
}

model BillingConsultationOrderLineItem {
  id                  Int          @id @default(autoincrement())
  visitId             String
  Visit               PatientVisit @relation(fields: [visitId], references: [id])
  orderId             String
  order               Order        @relation(fields: [orderId], references: [id])
  hospitalId          Int
  hospital            Hospital     @relation(fields: [hospitalId], references: [id])
  isRemoved           Boolean
  quantity            Int
  rate                Float
  discount            Float
  tax                 Float
  totalAmount         Float
  updatedBy           String?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  Bill                Bill?        @relation(fields: [billId], references: [id])
  billId              String?
  consultationOrderId String?
}

model Bill {
  id                               String                             @id @default(uuid())
  visitId                          String
  Visit                            PatientVisit                       @relation(fields: [visitId], references: [id])
  BillingPatientOrderLineItem      BillingPatientOrderLineItem[]
  BillingConsultationOrderLineItem BillingConsultationOrderLineItem[]
  hospitalId                       Int
  hospital                         Hospital                           @relation(fields: [hospitalId], references: [id])
  items                            Json
  totalAmount                      Float
  details                          String?
  updatedBy                        String?
  createdAt                        DateTime                           @default(now())
  updatedAt                        DateTime                           @updatedAt
  Receipt                          Receipt[]
}

enum PaymentMode {
  CASH
  CARD
}

model Receipt {
  id          String       @id @default(uuid())
  visitId     String
  Visit       PatientVisit @relation(fields: [visitId], references: [id])
  hospitalId  Int
  accountId   Int?
  account     BankAccount? @relation(fields: [accountId], references: [id])
  hospital    Hospital     @relation(fields: [hospitalId], references: [id])
  billId      String?
  Bill        Bill?        @relation(fields: [billId], references: [id])
  reason      String?
  items       Json?
  paid        Float
  paymentMode PaymentMode
  updatedBy   String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model PatientVital {
  visitId     String       @unique
  Visit       PatientVisit @relation(fields: [visitId], references: [id])
  height      Float?
  weight      Float?
  temperature Json[]       @default([])
  pulse       Json[]       @default([])
  bp          Json[]       @default([])
  spo2        Json[]       @default([])
  updatedBy   String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model PatientPrescription {
  visitId String       @unique
  Visit   PatientVisit @relation(fields: [visitId], references: [id])
  list    Json

  updatedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BankAccount {
  hospitalId    Int
  Hospital      Hospital  @relation(fields: [hospitalId], references: [id])
  id            Int       @id @default(autoincrement())
  name          String
  accountNumber String
  icon          String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  updatedBy     String?
  isActive      Boolean   @default(true)
  Receipt       Receipt[]
}

enum Gender {
  MALE
  FEMALE
  OTHER
}
