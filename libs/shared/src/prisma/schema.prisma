generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Hospital {
  id           Int            @id @default(autoincrement())
  hospitalName String
  hospitalCode String
  phoneNumber  String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  hospitalImg  String
  Department   Department[]
  PatientVisit PatientVisit[]
  Permission   Permission[]
  Product      Product[]
  Role         Role[]
  User         User[]
  Vendor       Vendor[]
  Order        Order[]
}

model Department {
  id                Int                 @id @default(autoincrement())
  name              String
  hospitalId        Int
  updatedBy         String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  Hospital          Hospital            @relation(fields: [hospitalId], references: [id])
  PatientVisit      PatientVisit[]
  ProductDepartment ProductDepartment[]
  User              User[]
  Order             Order[]
  Role              Role?               @relation(fields: [roleId], references: [id])
  roleId            Int?
}

model User {
  id           String         @id @default(uuid())
  name         String
  email        String
  phoneNumber  String
  hospitalId   Int
  department   Int
  isActive     Boolean        @default(true)
  updatedBy    String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  PatientVisit PatientVisit[]
  Department   Department     @relation(fields: [department], references: [id])
  Hospital     Hospital       @relation(fields: [hospitalId], references: [id])
  UserLogin    UserLogin?

  @@unique([email, hospitalId])
}

model UserLogin {
  userId    String   @unique
  password  String
  updatedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Role {
  id           Int              @id @default(autoincrement())
  roleName     String
  description  String?
  hospitalId   Int
  isSuperAdmin Boolean?         @default(false)
  updatedBy    String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  Department   Department[]
  Hospital     Hospital         @relation(fields: [hospitalId], references: [id])
  permissions  RolePermission[]

  @@unique([roleName, hospitalId])
}

model Permission {
  id              Int              @id @default(autoincrement())
  permissionName  String           @unique
  description     String?
  hospitalId      Int
  updatedBy       String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  Hospital        Hospital         @relation(fields: [hospitalId], references: [id])
  rolePermissions RolePermission[]
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int
  updatedBy    String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])
}

model Vendor {
  id          String   @id @default(uuid())
  name        String
  phoneNumber String
  email       String
  address     String
  gstNumber   String
  branchName  String
  hospitalId  Int
  updatedBy   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Hospital    Hospital @relation(fields: [hospitalId], references: [id])
}

model Product {
  id                String              @id @default(uuid())
  name              String
  sku               String
  hsnCode           String
  genericName       String
  brandName         String
  manufacturer      String
  dosageForm        String
  strength          String
  purchaseRate      Float
  saleRate          Float
  mrp               Float
  maxDiscount       Float
  hospitalId        Int
  updatedBy         String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  Hospital          Hospital            @relation(fields: [hospitalId], references: [id])
  ProductDepartment ProductDepartment[]
}

model ProductDepartment {
  id           Int        @id @default(autoincrement())
  productId    String
  departmentId Int
  updatedBy    String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Department   Department @relation(fields: [departmentId], references: [id])
  Product      Product    @relation(fields: [productId], references: [id])

  @@unique([productId, departmentId])
}

model Patient {
  uhid         String         @id @default(uuid())
  name         String
  gender       Gender
  mobile       String
  hospitalId   Int
  dob          DateTime?
  bornYear     Int?
  aadharNumber String?
  aadharName   String?
  bloodGroup   String?
  address      String?
  city         String?
  pincode      String?
  updatedBy    String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  isDeleted    Boolean        @default(false)
  fatherName   String
  PatientVisit PatientVisit[]
}

model PatientVisit {
  id                  String               @id @default(uuid())
  uhid                String
  hospitalId          Int
  doctorId            String
  checkInTime         DateTime
  checkOutTime        DateTime?
  isDeleted           Boolean              @default(false)
  updatedBy           String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  Assessment          Assessment?
  Doctor              User                 @relation(fields: [doctorId], references: [id])
  Hospital            Hospital             @relation(fields: [hospitalId], references: [id])
  Patient             Patient              @relation(fields: [uhid], references: [uhid])
  Department          Department?          @relation(fields: [departmentId], references: [id])
  departmentId        Int?
  PatientOrder        PatientOrder?
  PatientVital        PatientVital?
  PatientPrescription PatientPrescription?
  VisitBilling        VisitBilling?
}

model Assessment {
  visitId             String       @unique
  complaint           String?
  currentMedication   String?
  pastMedicalHistory  String?
  examination         String?
  investigation       String?
  procedureDone       String?
  diagnosis           Json?
  treatmentGiven      String?
  advice              String?
  followUpDate        DateTime?
  followupInstruction String?
  updatedBy           String?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  PatientVisit        PatientVisit @relation(fields: [visitId], references: [id])
}

model Order {
  id                  String        @id @default(uuid())
  hospitalId          Int
  hospital            Hospital      @relation(fields: [hospitalId], references: [id])
  name                String
  description         String?
  departmentId        Int
  department          Department    @relation(fields: [departmentId], references: [id])
  updatedBy           String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  PatientOrder        PatientOrder? @relation(fields: [patientOrderVisitId], references: [visitId])
  patientOrderVisitId String?
}

model PatientOrder {
  visitId      String       @unique
  order        Order[]
  orderDate    DateTime
  updatedBy    String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  PatientVisit PatientVisit @relation(fields: [visitId], references: [id])
}

model PatientVital {
  visitId     String       @unique
  Visit       PatientVisit @relation(fields: [visitId], references: [id])
  height      Float?
  weight      Float?
  temperature Json[]       @default([])
  pulse       Json[]       @default([])
  bp          Json[]       @default([])
  spo2        Json[]       @default([])
  updatedBy   String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model VisitBilling {
  visitId     String       @unique
  Visit       PatientVisit @relation(fields: [visitId], references: [id])
  items       Json?
  cashAmount  Float
  cardAmount  Float
  totalAmount Float
  details     String?
  updatedBy   String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model PatientPrescription {
  visitId String       @unique
  Visit   PatientVisit @relation(fields: [visitId], references: [id])
  list    Json

  updatedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Gender {
  MALE
  FEMALE
  OTHER
}
