generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Hospital {
  id           Int          @id @default(autoincrement())
  hospitalName String
  phoneNumber  String
  Department   Department[]
  User         User[]

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Role       Role[]
  Permission Permission[]
}

model Department {
  id         Int      @id @default(autoincrement())
  name       String
  hospitalId Int
  Hospital   Hospital @relation(fields: [hospitalId], references: [id])
  User       User[]
  roleId     Int
  Role       Role     @relation(fields: [roleId], references: [id])

  updatedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id          String     @id @default(uuid())
  name        String
  email       String
  phoneNumber String
  hospitalId  Int
  Hospital    Hospital   @relation(fields: [hospitalId], references: [id])
  department  Int
  Department  Department @relation(fields: [department], references: [id])
  UserRole    UserRole[]
  isActive    Boolean    @default(true)

  updatedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  UserLogin UserLogin[]

  @@unique([email, hospitalId])
}

model UserLogin {
  userId   String @unique
  user     User   @relation(fields: [userId], references: [id])
  password String

  updatedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id          Int              @id @default(autoincrement())
  roleName    String
  description String? // Optional role description
  roleUsers   UserRole[] // Relationship to users
  permissions RolePermission[] // Relationship to permissions
  hospitalId  Int
  Hospital    Hospital         @relation(fields: [hospitalId], references: [id])

  updatedBy  String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Department Department[]

  @@unique([roleName, hospitalId])
}

model UserRole {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  role   Role   @relation(fields: [roleId], references: [id])
  roleId Int

  updatedBy String?
  createdAt DateTime @default(now())

  @@unique([userId, roleId])
}

model Permission {
  id              Int              @id @default(autoincrement())
  permissionName  String           @unique
  description     String? // Optional permission description
  rolePermissions RolePermission[] // Relationship to roles
  hospitalId      Int
  Hospital        Hospital         @relation(fields: [hospitalId], references: [id])

  updatedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId Int

  updatedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
